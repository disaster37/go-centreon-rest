// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/disaster37/go-centreon-rest/v21/api (interfaces: API)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	centreonapi "github.com/disaster37/go-centreon-rest/v21/api"
	resty "github.com/go-resty/resty/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAPI) Auth() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth")
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockAPIMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAPI)(nil).Auth))
}

// Client mocks base method.
func (m *MockAPI) Client() *resty.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*resty.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockAPIMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockAPI)(nil).Client))
}

// Service mocks base method.
func (m *MockAPI) Service() centreonapi.ServiceAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(centreonapi.ServiceAPI)
	return ret0
}

// Service indicates an expected call of Service.
func (mr *MockAPIMockRecorder) Service() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockAPI)(nil).Service))
}

// ServiceGroup mocks base method.
func (m *MockAPI) ServiceGroup() centreonapi.ServiceGroupAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceGroup")
	ret0, _ := ret[0].(centreonapi.ServiceGroupAPI)
	return ret0
}

// ServiceGroup indicates an expected call of ServiceGroup.
func (mr *MockAPIMockRecorder) ServiceGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceGroup", reflect.TypeOf((*MockAPI)(nil).ServiceGroup))
}

// ServiceTemplate mocks base method.
func (m *MockAPI) ServiceTemplate() centreonapi.ServiceTemplateAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceTemplate")
	ret0, _ := ret[0].(centreonapi.ServiceTemplateAPI)
	return ret0
}

// ServiceTemplate indicates an expected call of ServiceTemplate.
func (mr *MockAPIMockRecorder) ServiceTemplate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceTemplate", reflect.TypeOf((*MockAPI)(nil).ServiceTemplate))
}
